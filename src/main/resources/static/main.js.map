{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/models/Tournament.ts","webpack:///./src/app/player-list/player-list.component.html","webpack:///./src/app/player-list/player-list.component.scss","webpack:///./src/app/player-list/player-list.component.ts","webpack:///./src/app/services/dewis.service.ts","webpack:///./src/app/services/player.service.ts","webpack:///./src/app/services/tournament.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {PlayerListComponent} from \"./player-list/player-list.component\";\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'home', pathMatch: 'full' },\n  { path: 'home', redirectTo: 'players', pathMatch: 'full' },\n  { path: 'players', component: PlayerListComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"<mat-toolbar color=\\\"primary\\\">\\n  {{title}}\\n</mat-toolbar>\\n\\n<a routerLink=\\\"/home\\\">\\n  <button mat-button color=\\\"primary\\\">\\n    Player List\\n  </button>\\n</a>\\n\\n<button mat-button color=\\\"primary\\\">\\n  Second Button\\n</button>\\n\\n<router-outlet></router-outlet>\\n\\n<link href=\\\"https://fonts.googleapis.com/icon?family=Material+Icons\\\" rel=\\\"stylesheet\\\">\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'DSJ-Gadgets';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport {AppRoutingModule} from \"./app-routing.module\";\nimport {\n  MatButtonModule, MatCardModule, MatCheckboxModule, MatDatepickerModule, MatDialogModule, MatExpansionModule,\n  MatFormFieldModule, MatGridListModule, MatIconModule, MatInputModule, MatListModule, MatNativeDateModule,\n  MatPaginatorModule, MatSelectModule, MatSlideToggleModule,\n  MatSortModule,\n  MatTableModule, MatTabsModule,\n  MatToolbarModule\n} from \"@angular/material\";\nimport {PlayerListComponent} from \"./player-list/player-list.component\";\nimport {HttpClientModule} from \"@angular/common/http\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {BrowserAnimationsModule} from \"@angular/platform-browser/animations\";\nimport {LayoutModule} from \"@angular/cdk/layout\";\nimport {NgxSoapModule} from \"ngx-soap\";\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PlayerListComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    LayoutModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatIconModule,\n    MatListModule,\n    MatTabsModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatSelectModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatExpansionModule,\n    MatSlideToggleModule,\n    MatGridListModule,\n    NgxSoapModule,\n    MatDialogModule,\n    MatCheckboxModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","export class Tournament {\r\n  id: number;\r\n  tid: number;\r\n  tcode: string;\r\n  tname: string;\r\n  calculatedOn: Date;\r\n  finishedOn: Date;\r\n  ratingOld: number;\r\n  ratingNew: number;\r\n  \r\n}\r\n","module.exports = \"<br> <br>\\n\\n<mat-card>\\n  <mat-card-header>\\n    Player List\\n    &nbsp; &nbsp;\\n    <button mat-raised-button (click)=\\\"getPlayers()\\\">\\n      <mat-icon>update</mat-icon> Update\\n    </button>\\n    <button mat-raised-button (click)=\\\"importTournamentsAndSave()\\\">\\n      <mat-icon>import_export</mat-icon> Import Tournaments\\n    </button>\\n    <button mat-raised-button (click)=\\\"importPlayerIds()\\\">\\n      <mat-icon>import_export</mat-icon> Import Player Ids\\n    </button>\\n    <button mat-raised-button (click)=\\\"importPlayerDetails()\\\">\\n      <mat-icon>import_export</mat-icon> Import Player Tournaments\\n    </button>\\n    <button mat-raised-button (click)=\\\"calculateRatings()\\\">\\n      <mat-icon>code</mat-icon> Calculate\\n    </button>\\n    &nbsp; &nbsp;\\n    <br> <br>\\n  </mat-card-header>\\n\\n  <mat-card-content>\\n    <table mat-table [dataSource]=\\\"dataSource\\\" matSort class=\\\"mat-elevation-z8\\\">\\n\\n      <!-- Name Column -->\\n      <ng-container matColumnDef=\\\"name\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\">\\n          <mat-form-field>\\n            <input name=\\\"name\\\" matInput [(ngModel)]=\\\"element.name\\\" [disabled]=\\\"element.mode!='edit'\\\">\\n          </mat-form-field>\\n        </td>\\n      </ng-container>\\n\\n      <!-- pid Column -->\\n      <ng-container matColumnDef=\\\"pid\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> DSB-Number </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\">\\n          <mat-form-field>\\n            <input name=\\\"name\\\" matInput [(ngModel)]=\\\"element.pid\\\" [disabled]=\\\"true\\\">\\n          </mat-form-field>\\n        </td>\\n      </ng-container>\\n\\n      <!-- birthyear Column -->\\n      <ng-container matColumnDef=\\\"birthyear\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"small\\\"> Year of Birth </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\">\\n          <mat-form-field>\\n            <input name=\\\"name\\\" matInput [(ngModel)]=\\\"element.yearOfBirth\\\" [disabled]=\\\"true\\\">\\n          </mat-form-field>\\n        </td>\\n      </ng-container>\\n\\n      <!-- may old Column -->\\n      <ng-container matColumnDef=\\\"mayOld\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> May 2018 </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\">\\n          <mat-form-field class=\\\"small\\\">\\n            <input name=\\\"name\\\" matInput [(ngModel)]=\\\"element.ratings[1]\\\" [disabled]=\\\"true\\\">\\n          </mat-form-field>\\n        </td>\\n      </ng-container>\\n\\n      <!-- july old Column -->\\n      <ng-container matColumnDef=\\\"julOld\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> July 2018 </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\">\\n          <mat-form-field class=\\\"small\\\">\\n            <input name=\\\"name\\\" matInput [(ngModel)]=\\\"element.ratings[2]\\\" [disabled]=\\\"true\\\">\\n          </mat-form-field>\\n        </td>\\n      </ng-container>\\n\\n      <!-- may old Column -->\\n      <ng-container matColumnDef=\\\"sepOld\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Sept 2018 </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\">\\n          <mat-form-field class=\\\"small\\\">\\n            <input name=\\\"name\\\" matInput [(ngModel)]=\\\"element.ratings[3]\\\" [disabled]=\\\"true\\\">\\n          </mat-form-field>\\n        </td>\\n      </ng-container>\\n\\n      <!-- may old Column -->\\n      <ng-container matColumnDef=\\\"novOld\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Nov 2018 </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\">\\n          <mat-form-field class=\\\"small\\\">\\n            <input name=\\\"name\\\" matInput [(ngModel)]=\\\"element.ratings[4]\\\" [disabled]=\\\"true\\\">\\n          </mat-form-field>\\n        </td>\\n      </ng-container>\\n\\n      <!-- may old Column -->\\n      <ng-container matColumnDef=\\\"janNew\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Jan 2019 </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\">\\n          <mat-form-field class=\\\"small\\\">\\n            <input name=\\\"name\\\" matInput [(ngModel)]=\\\"element.ratings[5]\\\" [disabled]=\\\"true\\\">\\n          </mat-form-field>\\n        </td>\\n      </ng-container>\\n\\n      <!-- may old Column -->\\n      <ng-container matColumnDef=\\\"marNew\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> March 2019 </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\">\\n          <mat-form-field class=\\\"small\\\">\\n            <input name=\\\"name\\\" matInput [(ngModel)]=\\\"element.ratings[6]\\\" [disabled]=\\\"true\\\">\\n          </mat-form-field>\\n        </td>\\n      </ng-container>\\n\\n      <!-- may new Column -->\\n      <ng-container matColumnDef=\\\"mayNew\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> May 2019 </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\">\\n          <mat-form-field class=\\\"small\\\">\\n            <input name=\\\"name\\\" matInput [(ngModel)]=\\\"element.ratings[7]\\\" [disabled]=\\\"true\\\">\\n          </mat-form-field>\\n        </td>\\n      </ng-container>\\n\\n      <!-- rating-max Column -->\\n      <ng-container matColumnDef=\\\"ratingMax\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Max </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\">\\n          <mat-form-field class=\\\"small\\\">\\n            <input name=\\\"name\\\" matInput [(ngModel)]=\\\"element.maxRating\\\" [disabled]=\\\"true\\\">\\n          </mat-form-field>\\n        </td>\\n      </ng-container>\\n\\n      <!-- rating-min Column -->\\n      <ng-container matColumnDef=\\\"ratingMin\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Min </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\">\\n          <mat-form-field class=\\\"small\\\">\\n            <input name=\\\"name\\\" matInput [(ngModel)]=\\\"element.minRating\\\" [disabled]=\\\"true\\\">\\n          </mat-form-field>\\n        </td>\\n      </ng-container>\\n\\n      <ng-container matColumnDef=\\\"buttons\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\">\\n          <div>\\n            <button mat-raised-button (click)=\\\"searchPlayer(element)\\\">\\n              <mat-icon>search</mat-icon>\\n            </button>\\n            <button mat-raised-button (click)=\\\"getPlayerDetails(element)\\\">\\n              <mat-icon>details</mat-icon>\\n            </button>\\n          </div>\\n        </td>\\n      </ng-container>\\n\\n      <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n      <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns\\\"></tr>\\n    </table>\\n    <mat-paginator [pageSizeOptions]=\\\"[10, 20]\\\" showFirstLastButtons></mat-paginator>\\n  </mat-card-content>\\n</mat-card>\\n\\n<br>\\n\"","module.exports = \".small {\\n  width: 50px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGxheWVyLWxpc3QvQzpcXFVzZXJzXFxUb2JpYXNcXERvY3VtZW50c1xcUHJvZ3JhbW1pZXJ1bmdlblxcZHNqXFxmcm9udGVuZC9zcmNcXGFwcFxccGxheWVyLWxpc3RcXHBsYXllci1saXN0LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsWUFBVyxFQUNaIiwiZmlsZSI6InNyYy9hcHAvcGxheWVyLWxpc3QvcGxheWVyLWxpc3QuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuc21hbGwge1xyXG4gIHdpZHRoOiA1MHB4O1xyXG59XHJcbiJdfQ== */\"","import {Component, ElementRef, OnInit, ViewChild} from '@angular/core';\nimport {Player} from \"@angular/core/src/render3/interfaces/player\";\nimport {MatPaginator, MatSort, MatTableDataSource} from \"@angular/material\";\nimport {PlayerService} from \"../services/player.service\";\nimport {DewisService} from \"../services/dewis.service\";\nimport {DewisPlayer} from \"../models/DewisPlayer\";\nimport {Tournament} from \"../models/Tournament\";\nimport {TournamentService} from \"../services/tournament.service\";\n\n@Component({\n  selector: 'app-player-list',\n  templateUrl: './player-list.component.html',\n  styleUrls: ['./player-list.component.scss']\n})\nexport class PlayerListComponent implements OnInit {\n\n  players: Player[];\n  dewisPlayers: DewisPlayer[];\n\n  // Table fields\n  dataSource: MatTableDataSource<Player>;\n  displayedColumns: string[];\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n\n  constructor(private playerService: PlayerService, private dewisService: DewisService, private tournamentService: TournamentService) {\n\n  }\n\n  ngOnInit() {\n    this.getPlayers();\n    this.displayedColumns = ['name', 'pid', 'birthyear', 'mayOld', 'julOld', 'sepOld', 'novOld', 'janNew', 'marNew', 'mayNew', 'ratingMin', 'ratingMax', 'buttons'];\n  }\n\n  getPlayers() {\n    this.playerService.getAllPlayers().subscribe(\n      data => this.players = data._embedded.players,\n      error => console.log(error),\n      () => this.updateTable(this.players)\n    )\n  }\n\n  updateTable(players: any) {\n    this.dataSource = new MatTableDataSource<Player>(players);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  getPlayerDetails(element: any) {\n    this.dewisService.findTournamentCardById(element.pid).subscribe(\n      res => {\n        let test = res.result.return.tournaments;\n        let tournaments = [];\n        for(let tournament of res.result.return.tournaments.item) {\n          let tempTournament = new Tournament();\n          tempTournament.tname = tournament.tname.$value;\n          tempTournament.tcode = tournament.tcode.$value;\n          tempTournament.ratingOld = tournament.ratingOld.$value;\n          tempTournament.ratingNew = tournament.ratingNew.$value;\n          tournaments.push(tempTournament);\n        }\n        this.playerService.addTournamentsToPlayer(element, tournaments).subscribe();\n        element.tournaments = tournaments;\n      }\n    )\n  }\n\n  searchPlayer(element: any) {\n    this.dewisService.findPlayerByName(element.firstName, element.lastName).subscribe(\n      res => {\n        // If only one player is found, this player can be set as the correct player.\n        if (!Array.isArray(res.result.return.members.item)) {\n          element.pid = res.result.return.members.item.pid.$value;\n        }\n\n        // If more than one player is found, it is checked if by using birthyear the result is unique.\n        else if (res.result.return.members.item.length > 1) {\n          let counter = 0;\n          let correctPlayers = [];\n          for (let player of res.result.return.members.item) {\n            let value = +player.yearOfBirth.$value;\n            if (value == element.yearOfBirth) {\n              correctPlayers.push(player);\n              counter++;\n            }\n\n          }\n\n          // If counter == 1 then now the result is unique.\n          if (counter == 1) {\n            element.pid = correctPlayers[0].pid.$value;\n          }\n\n          // If the result is not unique after using the birthyear, the club will be used as well.\n          else {\n            let correctPlayers2 = [];\n            let counter2 = 0;\n            for (let player of correctPlayers) {\n              if (player.club == element.club) {\n                correctPlayers2.push(player);\n                counter2++;\n              }\n            }\n\n            // If the counter is still > 1, then this information is logged.\n            if (counter2 > 1)\n              console.log(\"Counter is > 1, so first element chosen!\");\n\n            // Now it is assumed that the result is unique.\n              else {\n              element.pid = correctPlayers2[0].pid.$value;\n            }\n          }\n        }\n      },\n\n  error => console.log(error),\n      () => this.playerService.patchPlayer(element).subscribe(),\n    )\n  }\n\n  importTournamentsAndSave() {\n    let startDate = new Date(2018,0,1);\n    let endDate = new Date(2019, 0, 1);\n    this.tournamentService.deleteAllTournaments().subscribe(\n      () => {},\n      error => console.log(error),\n      () => {\n        this.dewisService.findTournamentsByPeriod(startDate, endDate).subscribe(\n          res => {\n            let tournaments = [];\n              for(let tournament of res.result.return.tournaments.item) {\n              let tournamentForImport = new Tournament();\n              tournamentForImport.calculatedOn = new Date(tournament.computedOn.$value);\n              tournamentForImport.finishedOn = new Date(tournament.finishedOn.$value);\n              tournamentForImport.tcode = tournament.tcode.$value;\n              tournamentForImport.tname = tournament.tname.$value;\n              tournamentForImport.tid = tournament.tid.$value;\n              // Rating old and Rating new are still empty because they are only available on Tournament attached with player.\n              //this.tournamentService.postTournament(tournamentForImport).subscribe();\n                tournaments.push(tournamentForImport);\n            }\n              this.tournamentService.postMultipleTournaments(tournaments).subscribe();\n\n          },\n          error => console.log(error),\n          () => {\n            let startDate = new Date(2019,0,1);\n            let endDate = new Date(2020, 0, 1);\n            this.dewisService.findTournamentsByPeriod(startDate, endDate).subscribe(\n              res => {\n                let tournaments = [];\n                for(let tournament of res.result.return.tournaments.item) {\n                  let tournamentForImport = new Tournament();\n                  tournamentForImport.calculatedOn = new Date(tournament.computedOn.$value);\n                  tournamentForImport.finishedOn = new Date(tournament.finishedOn.$value);\n                  tournamentForImport.tcode = tournament.tcode.$value;\n                  tournamentForImport.tname = tournament.tname.$value;\n                  tournamentForImport.tid = tournament.tid.$value;\n                  // Rating old and Rating new are still empty because they are only available on Tournament attached with player.\n                  //this.tournamentService.postTournament(tournamentForImport).subscribe();\n                  tournaments.push(tournamentForImport);\n                }\n                this.tournamentService.postMultipleTournaments(tournaments).subscribe();\n              },\n              error => console.log(error),\n              () => {\n\n              }\n            );\n          }\n        );\n      }\n    );\n  }\n\n  calculateRatings() {\n    let players = [];\n    let newPlayers = [];\n    this.playerService.getAllPlayers().subscribe(\n      data => players = data._embedded.players,\n      error => console.log(error),\n    () => {\n        for(let player of players) {\n          this.playerService.getRatings(player).subscribe(\n            data => player.ratings = data,\n            error => console.log(error),\n            () => {\n              newPlayers.push(player);\n              this.players = newPlayers;\n              this.getPlayers();\n            }\n          )\n        }\n    }\n    );\n  }\n\n  importPlayerIds() {\n    let players = [];\n    this.playerService.getAllPlayers().subscribe(\n      data => players = data._embedded.players,\n      error => console.log(error),\n      () => {\n        for (let playerOut of players) {\n          this.dewisService.findPlayerByName(playerOut.firstName, playerOut.lastName).subscribe(\n            res => {\n              // If only one player is found, this player can be set as the correct player.\n              if (!Array.isArray(res.result.return.members.item)) {\n                playerOut.pid = res.result.return.members.item.pid.$value;\n              }\n\n              // If more than one player is found, it is checked if by using birthyear the result is unique.\n              else if (res.result.return.members.item.length > 1) {\n                let counter = 0;\n                let correctPlayers = [];\n                for (let player of res.result.return.members.item) {\n                  let value = +player.yearOfBirth.$value;\n                  if (value == playerOut.yearOfBirth) {\n                    correctPlayers.push(player);\n                    counter++;\n                  }\n\n                }\n\n                // If counter == 1 then now the result is unique.\n                if (counter == 1) {\n                  playerOut.pid = correctPlayers[0].pid.$value;\n                }\n\n                // If the result is not unique after using the birthyear, the club will be used as well.\n                else {\n                  let correctPlayers2 = [];\n                  let counter2 = 0;\n                  for (let player of correctPlayers) {\n                    if (player.club == playerOut.club) {\n                      correctPlayers2.push(player);\n                      counter2++;\n                    }\n                  }\n\n                  // If the counter is still > 1, then this information is logged.\n                  if (counter2 > 1)\n                    console.log(\"Counter is > 1, so first element chosen!\");\n\n                  // Now it is assumed that the result is unique.\n                  else {\n                    playerOut.pid = correctPlayers2[0].pid.$value;\n                  }\n                }\n\n              }\n              this.playerService.patchPlayer(playerOut).subscribe(\n                () => {this.getPlayers()},\n                error => console.log(error),\n              );\n            },\n\n            error => console.log(error),\n            () => {\n\n            },\n          )\n        }\n\n      }\n    )\n\n  }\n\n  importPlayerDetails() {\n    let players = [];\n    this.playerService.getAllPlayers().subscribe(\n      data => players = data._embedded.players,\n      error => console.log(error),\n      () => {\n        for (let playerOut of players) {\n          this.dewisService.findTournamentCardById(playerOut.pid).subscribe(\n            res => {\n              let test = res.result.return.tournaments;\n              let tournaments = [];\n              for(let tournament of res.result.return.tournaments.item) {\n                let tempTournament = new Tournament();\n                tempTournament.tname = tournament.tname.$value;\n                tempTournament.tcode = tournament.tcode.$value;\n                tempTournament.ratingOld = tournament.ratingOld.$value;\n\n                if (!tournament.ratingNew && !tournament.ratingOld)\n                  tempTournament.ratingNew = 0;\n                else\n                  if (!tournament.ratingNew)\n                    tempTournament.ratingNew = tempTournament.ratingOld;\n                  else\n                    tempTournament.ratingNew = tournament.ratingNew.$value;\n\n                tournaments.push(tempTournament);\n              }\n              playerOut.tournaments = tournaments;\n              this.playerService.addTournamentsToPlayer(playerOut, tournaments).subscribe();\n            }\n          )\n        }\n      }\n    )\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {Client, NgxSoapService} from \"ngx-soap\";\nimport {Observable} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DewisService {\n\n  client: Client;\n\n  constructor(private soap: NgxSoapService) {\n    this.soap.createClient('assets/dewis.wsdl').then(\n      client => this.client = client\n    );\n  }\n\n  findPlayerByName(firstName: string, lastName: string): Observable<any> {\n    let body = {\n      firstname: firstName,\n      surename: lastName,\n    };\n    return this.client.call(\"searchByName\", body);\n  }\n\n  findTournamentCardById(pid: number): Observable<any> {\n    let body = {\n      pid: pid,\n    };\n    return this.client.call(\"tournamentCardForId\", body);\n  }\n\n  findTournamentsByPeriod(startDate: Date, endDate: Date) {\n    let body = {\n      since: startDate.toISOString(),\n      until: endDate.toISOString(),\n      bSubs: true,\n    }\n    return this.client.call(\"tournamentsByPeriod\", body);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable, of} from \"rxjs\";\nimport {Player} from \"../models/Player\";\nimport {catchError, tap} from \"rxjs/operators\";\nimport {Tournament} from \"../models/Tournament\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlayerService {\n\n  constructor(private http: HttpClient) { }\n\n  baseUrl = 'http://localhost:8080/api/';\n\n  getAllPlayers(): Observable<any> {\n    let url = this.baseUrl + 'players';\n    return this.http.get(url);\n  }\n\n  addTournamentsToPlayer(player: Player, tournaments: Tournament[]): Observable<Player> {\n    let url = this.baseUrl + 'players/' + player.id + '/addTournamentsAsList';\n    return this.http.patch<Player>(url, tournaments);\n  }\n\n  patchPlayer(player: Player): Observable<Player> {\n    let url = this.baseUrl + 'players/' + player.id;\n    return this.http.patch<Player>(url, player)\n      .pipe(\n        tap((changedPlayer: Player) => console.log('Changed player with id=' + changedPlayer.id)),\n        catchError(this.handleError<Player>('changePlayer'))\n      );\n  }\n\n  getRatings(player: Player): Observable<any> {\n    let url = this.baseUrl + 'players/' + player.id + '/getRatings';\n    return this.http.get(url);\n  }\n\n  private handleError<T> (operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      alert(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable, of} from \"rxjs\";\nimport {Tournament} from \"../models/Tournament\";\nimport {catchError, tap} from \"rxjs/operators\";\nimport {Player} from \"../models/Player\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TournamentService {\n\n  constructor(private http: HttpClient) { }\n\n  baseUrl = 'http://localhost:8080/api/';\n\n  deleteAllTournaments(): Observable<any> {\n    let url = this.baseUrl + 'tournaments/deleteAllTournaments';\n    return this.http.get(url);\n  }\n\n  postMultipleTournaments(tournaments: Tournament[]): Observable<Tournament> {\n    let url = this.baseUrl + 'tournaments/addTournamentsAsList';\n    return this.http.post<any>(url, tournaments);\n  }\n\n  private handleError<T> (operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      alert(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import 'hammerjs';\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}